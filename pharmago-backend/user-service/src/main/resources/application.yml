server:
  port: 8081
  servlet:
    context-path: /api/v1/users

spring:
  application:
    name: user-service
  
  # Database Configuration
  datasource:
    url: jdbc:mysql://localhost:3306/pharmago_users?useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true
    username: ${DB_USERNAME:pharmago_user}
    password: ${DB_PASSWORD:pharmago_password}
    driver-class-name: com.mysql.cj.jdbc.Driver
    
  # JPA Configuration
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: ${SHOW_SQL:false}
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL8Dialect
        format_sql: true
        use_sql_comments: true
        
  # Mail Configuration
  mail:
    host: ${MAIL_HOST:smtp.gmail.com}
    port: ${MAIL_PORT:587}
    username: ${MAIL_USERNAME:}
    password: ${MAIL_PASSWORD:}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
            required: true
          connectiontimeout: 5000
          timeout: 5000
          writetimeout: 5000

# Eureka Configuration
eureka:
  client:
    service-url:
      defaultZone: ${EUREKA_SERVER_URL:http://localhost:8761/eureka/}
    register-with-eureka: true
    fetch-registry: true
  instance:
    prefer-ip-address: true
    instance-id: ${spring.application.name}:${spring.application.instance_id:${random.value}}

# JWT Configuration
pharmago:
  jwt:
    secret: ${JWT_SECRET:pharmaGoSecretKeyForJWTTokenGenerationAndValidation2024}
    expiration: ${JWT_EXPIRATION:86400000} # 24 hours
    refresh-expiration: ${JWT_REFRESH_EXPIRATION:604800000} # 7 days
  
  # Email Configuration
  email:
    verification:
      enabled: ${EMAIL_VERIFICATION_ENABLED:true}
      expiration: ${EMAIL_VERIFICATION_EXPIRATION:86400000} # 24 hours
    password-reset:
      expiration: ${PASSWORD_RESET_EXPIRATION:3600000} # 1 hour
    from: ${EMAIL_FROM:noreply@pharmago.com}
    base-url: ${BASE_URL:http://localhost:3000}

# Logging Configuration
logging:
  level:
    com.pharmago: ${LOG_LEVEL:INFO}
    org.springframework.security: ${SECURITY_LOG_LEVEL:WARN}
    org.hibernate.SQL: ${SQL_LOG_LEVEL:WARN}
    org.hibernate.type.descriptor.sql.BasicBinder: ${SQL_BINDING_LOG_LEVEL:WARN}
  pattern:
    console: "%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"
  file:
    name: logs/user-service.log
    max-size: 10MB
    max-history: 30

# Management Configuration
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: when_authorized
  info:
    env:
      enabled: true

# Swagger Configuration
springdoc:
  api-docs:
    path: /api-docs
  swagger-ui:
    path: /swagger-ui.html
    enabled: true
  show-actuator: true

# Security Configuration
security:
  cors:
    allowed-origins: ${CORS_ALLOWED_ORIGINS:http://localhost:3000,http://localhost:3001}
    allowed-methods: GET,POST,PUT,DELETE,OPTIONS
    allowed-headers: "*"
    allow-credentials: true
    max-age: 3600